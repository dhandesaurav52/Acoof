
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating personalized outfit suggestions based on user browsing history.
 *
 * The flow takes user browsing history as input and returns outfit suggestions.
 *   - generateOutfitSuggestions - A function that generates outfit suggestions.
 *   - GenerateOutfitSuggestionsInput - The input type for the generateOutfitSuggestions function.
 *   - GenerateOutfitSuggestionsOutput - The return type for the generateOutfitSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateOutfitSuggestionsInputSchema = z.object({
  browsingHistory: z
    .string()
    .describe(
      'A string containing the user browsing history, including viewed product names and categories.'
    ),
});
export type GenerateOutfitSuggestionsInput = z.infer<typeof GenerateOutfitSuggestionsInputSchema>;

const GenerateOutfitSuggestionsOutputSchema = z.object({
  suggestions: z
    .array(z.string())
    .describe('An array of outfit suggestions, each a description of an outfit.'),
});
export type GenerateOutfitSuggestionsOutput = z.infer<typeof GenerateOutfitSuggestionsOutputSchema>;

export async function generateOutfitSuggestions(
  input: GenerateOutfitSuggestionsInput
): Promise<GenerateOutfitSuggestionsOutput> {
  return generateOutfitSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateOutfitSuggestionsPrompt',
  input: {schema: GenerateOutfitSuggestionsInputSchema},
  output: {schema: GenerateOutfitSuggestionsOutputSchema},
  prompt: `You are a personal stylist, specializing in creating personalized outfit suggestions.

Based on the user's browsing history, generate outfit suggestions that complement their viewed items and align with current fashion trends.

Browsing History: {{{browsingHistory}}}

Suggestions:`,
});

const generateOutfitSuggestionsFlow = ai.defineFlow(
  {
    name: 'generateOutfitSuggestionsFlow',
    inputSchema: GenerateOutfitSuggestionsInputSchema,
    outputSchema: GenerateOutfitSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
