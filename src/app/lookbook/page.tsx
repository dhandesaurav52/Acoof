'use client';

import { useState } from 'react';
import Image from 'next/image';
import { OutfitCard } from "@/components/OutfitCard";
import { looks, lookCategories } from "@/lib/data";
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Wand2, Loader2, AlertCircle } from 'lucide-react';
import { generateOutfitImage } from '@/ai/flows/generate-outfit-image';
import { useToast } from '@/hooks/use-toast';

function AiOutfitCard({ imageUrl, prompt }: { imageUrl: string, prompt: string }) {
    return (
        <Card className="group relative w-full overflow-hidden rounded-lg">
            <div className="aspect-[4/5] w-full">
                <Image
                    src={imageUrl}
                    alt={prompt}
                    fill
                    className="object-cover transition-transform duration-300 group-hover:scale-105"
                    sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
                    data-ai-hint="fashion model"
                />
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent" />
            <CardContent className="absolute bottom-0 w-full p-6">
                <h3 className="text-xl font-bold text-white line-clamp-2">{prompt}</h3>
                <p className="text-sm text-white/80">Generated by AI Stylist</p>
            </CardContent>
        </Card>
    );
}


export default function LookbookPage() {
  const [prompt, setPrompt] = useState('');
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const handleGenerate = async () => {
    if (!prompt.trim()) {
        toast({
            variant: 'destructive',
            title: 'Prompt is empty',
            description: 'Please describe the outfit you want to see.'
        });
        return;
    }
    
    setIsLoading(true);
    setError(null);
    setGeneratedImageUrl(null);

    try {
        const result = await generateOutfitImage(prompt);
        if (result.imageUrl) {
            setGeneratedImageUrl(result.imageUrl);
        } else {
            throw new Error('The AI did not return an image. Please try again.');
        }
    } catch (err: any) {
        console.error(err);
        let friendlyError = err.message || 'An unknown error occurred while generating the image.';
        
        if (friendlyError.includes('API key not valid')) {
            friendlyError = 'Your Google AI API key is not valid. Please check your .env file.';
        } else if (friendlyError.includes('permission to access')) {
            friendlyError = "The AI service is not enabled. Please go to your Google Cloud project and enable the 'Vertex AI API'.";
        } else if (friendlyError.includes('flow/generateOutfitImageFlow not found')) {
            friendlyError = "The AI feature isn't ready yet. This can happen during development if the server is restarting. Please try again in a moment.";
        }
        
        setError(friendlyError);
        toast({
            variant: 'destructive',
            title: 'Image Generation Failed',
            description: friendlyError,
        });
    } finally {
        setIsLoading(false);
    }
  };

  const looksByCategory = lookCategories.map(category => ({
    category,
    looks: looks.filter(look => look.category === category)
  })).filter(group => group.looks.length > 0);

  return (
    <div className="container mx-auto py-12 px-4">
      <div className="text-center mb-12">
        <h1 className="text-4xl font-bold tracking-tighter sm:text-5xl font-headline">The Lookbook</h1>
        <p className="max-w-2xl mx-auto mt-4 text-muted-foreground">
          Get inspired by our curated looks or create your own with the AI Stylist.
        </p>
      </div>

      {/* AI Stylist Section */}
      <section className="mb-16">
        <Card className="max-w-4xl mx-auto">
            <CardHeader>
                <CardTitle className="flex items-center gap-2">
                    <Wand2 className="h-6 w-6 text-primary"/>
                    AI Stylist
                </CardTitle>
                <CardDescription>
                    Describe an outfit, and our AI will create a visual concept for you. Try something like "a black leather jacket, white t-shirt, dark wash jeans, and brown chelsea boots".
                </CardDescription>
            </CardHeader>
            <CardContent>
                <div className="grid gap-4">
                    <Textarea 
                        placeholder="Describe your desired outfit here..."
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                        rows={3}
                        disabled={isLoading}
                    />
                    <Button onClick={handleGenerate} disabled={isLoading}>
                        {isLoading ? (
                            <>
                                <Loader2 className="mr-2 h-4 w-4 animate-spin"/>
                                Generating...
                            </>
                        ) : (
                            <>
                                <Wand2 className="mr-2 h-4 w-4"/>
                                Generate Image
                            </>
                        )}
                    </Button>
                </div>

                <div className="mt-6">
                    {isLoading && (
                        <div className="aspect-[4/5] w-full max-w-sm mx-auto flex flex-col items-center justify-center bg-muted rounded-lg">
                            <Loader2 className="h-10 w-10 text-primary animate-spin"/>
                            <p className="mt-4 text-muted-foreground">Generating your look...</p>
                        </div>
                    )}
                    {error && !isLoading && (
                         <div className="aspect-[4/5] w-full max-w-sm mx-auto flex flex-col items-center justify-center bg-destructive/10 text-destructive border border-destructive rounded-lg p-4 text-center">
                            <AlertCircle className="h-10 w-10"/>
                            <p className="mt-4 font-semibold">{error}</p>
                        </div>
                    )}
                    {generatedImageUrl && !isLoading && (
                         <div className="w-full max-w-sm mx-auto">
                            <AiOutfitCard imageUrl={generatedImageUrl} prompt={prompt}/>
                         </div>
                    )}
                </div>
            </CardContent>
        </Card>
      </section>

      <div className="space-y-16">
        <section>
          <div className="space-y-12">
            {looksByCategory.map(({ category, looks }) => (
              <div key={category}>
                <h2 className="text-3xl font-bold tracking-tighter md:text-4xl font-headline mb-8 text-center">
                  {category}
                </h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                  {looks.map((look) => (
                    <OutfitCard key={look.id} look={look} />
                  ))}
                </div>
              </div>
            ))}
          </div>
        </section>
      </div>
    </div>
  );
}
