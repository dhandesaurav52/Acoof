
{
  "rules": {
    "products": {
      ".read": true,
      ".write": "auth != null && auth.token.email === 'admin@example.com'"
    },
    "users": {
      ".read": "auth != null && auth.token.email === 'admin@example.com'",
      "$uid": {
        ".read": "auth != null && (auth.uid === $uid || auth.token.email === 'admin@example.com')",
        ".write": "auth != null && (auth.uid === $uid || auth.token.email === 'admin@example.com')",
        "orders": {
          ".write": "auth != null && auth.uid === $uid"
        }
      }
    },
    "user-notifications": {
      "$uid": {
        ".read": "auth != null && auth.uid === $uid",
        ".write": "auth != null && auth.token.email === 'admin@example.com'"
      }
    },
    "orders": {
      ".indexOn": "userId",
      ".read": "auth != null && auth.token.email === 'admin@example.com'",
      "$orderId": {
        ".read": "auth != null && (data.child('userId').val() === auth.uid || auth.token.email === 'admin@example.com')",
        // **FIX**: This rule is now corrected and simplified.
        // It allows a write if:
        // 1. The user is an admin.
        // 2. It's a NEW order (`!data.exists()`), the user is authenticated (`auth.uid`), the new data's userId matches their own, AND the status is 'Pending'.
        // 3. It's an EXISTING order (`data.exists()`) and the user is trying to cancel it.
        ".write": "auth != null && (auth.token.email === 'admin@example.com' || (!data.exists() && newData.child('userId').val() === auth.uid && newData.child('status').val() === 'Pending') || (data.exists() && data.child('userId').val() === auth.uid && newData.child('status').val() === 'Cancelled'))"
      }
    },
    "notifications": {
      ".read": "auth != null && auth.token.email === 'admin@example.com'",
      ".write": "auth != null"
    }
  }
}

    